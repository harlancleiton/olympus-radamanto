package com.olympus.radamanto.infrastructure.adapters.output.eventpublisher

import com.olympus.radamanto.domain.events.DomainEvent
import com.olympus.radamanto.domain.events.EventPublisher
import org.slf4j.LoggerFactory
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Component

/**
 * Implementation of [EventPublisher] that publishes domain events to Kafka topics.
 *
 * This class is responsible for sending domain events to specific Kafka topics.
 * The topic names are dynamically generated based on the event name.
 *
 * @property kafkaTemplate The Spring Kafka template used for sending messages to Kafka.
 */
@Component
class KafkaEventPublisher(
    private val kafkaTemplate: KafkaTemplate<String, DomainEvent>
) : EventPublisher {
    private val logger = LoggerFactory.getLogger(KafkaEventPublisher::class.java)

    companion object {
        /**
         * The word in the topic pattern that will be replaced with the event name.
         */
        private const val WORD_TO_REPLACE = "EVENT"


        /**
         * The pattern used to generate Kafka topic names.
         * The [WORD_TO_REPLACE] in this pattern will be replaced with the lowercase event name.
         */
        private const val PATTERN = "olympus.radamanto.$WORD_TO_REPLACE.json"
    }


    /**
     * Publishes a single domain event to its corresponding Kafka topic.
     *
     * The topic name is generated by replacing [WORD_TO_REPLACE] in [PATTERN] with the lowercase event name.
     * The event ID is used as the Kafka message key.
     *
     * @param event The domain event to be published.
     * @return A [Result] indicating success or failure of the publish operation.
     */
    override fun publish(event: DomainEvent): Result<Unit> {
        return runCatching {
            val topic = PATTERN.replace(WORD_TO_REPLACE, event.name.lowercase())
            logger.info("Publishing event ${event.id} to topic $topic")
            kafkaTemplate.send(topic, event.id.toString(), event).get()
            logger.info("Successfully published event ${event.id}")
        }.onFailure { error ->
            logger.error("Failed to publish event ${event.id}", error)
        }
    }


    /**
     * Publishes a collection of domain events to their corresponding Kafka topics.
     *
     * This method iterates through the collection and publishes each event individually.
     * If any event fails to publish, the entire operation is considered failed.
     *
     * @param events The collection of domain events to be published.
     * @return A [Result] indicating success or failure of the publish operation for all events.
     */
    override fun publishAll(events: Collection<DomainEvent>): Result<Unit> {
        return runCatching {
            events.forEach { event ->
                publish(event).getOrThrow()
            }
        }.onFailure { error ->
            logger.error("Failed to publish all events", error)
        }
    }
}
